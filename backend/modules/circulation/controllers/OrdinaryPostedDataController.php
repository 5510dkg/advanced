<?php

namespace backend\modules\circulation\controllers;

use Yii;
use backend\modules\circulation\models\OrdinaryPostedData;
use backend\modules\circulation\models\OrdinaryPostedDataSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use kartik\mpdf\Pdf;
use \yii\web\Response;
use yii\helpers\Html;

/**
 * OrdinaryPostedDataController implements the CRUD actions for OrdinaryPostedData model.
 */
class OrdinaryPostedDataController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all OrdinaryPostedData models.
     * @return mixed
     */
    public function actionIndex()
    {
        $this->layout='adminlayout';
        $searchModel = new OrdinaryPostedDataSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

     public function actionPrint($id){
        $this->layout='adminlayout';
        $request=Yii::$app->request;
         if($request->isAjax){


         }else{
            $pdf = new Pdf([
        'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
        'orientation'=>'L',

        'content' =>$this->renderPartial('print'),
        'options' => [
            'title' => 'Labels',
            'subject' => 'Generating Labels'
        ],
        // 'methods' => [
        //     'SetHeader' => ['Generated By: Ritesh Singh PDF Component||Generated On: ' . date("r")],
        //     'SetFooter' => ['|Page {PAGENO}|'],
        // ]
    ]);
    }
    return $pdf->render();

    }

    /**
     * Displays a single OrdinaryPostedData model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new OrdinaryPostedData model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new OrdinaryPostedData();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing OrdinaryPostedData model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing OrdinaryPostedData model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the OrdinaryPostedData model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return OrdinaryPostedData the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = OrdinaryPostedData::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
